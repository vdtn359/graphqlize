type Query {
  getInstrument(by: GetInstrumentInput!): Instrument
  listInstruments(filter: ListInstrumentsInput, pagination: Pagination = {limit: 20}, sort: [SortInstrument!]): Instruments!
  aggregateInstruments(filter: ListInstrumentsInput, pagination: Pagination, sort: [SortInstrument!], groupBy: InstrumentsGroupBy, having: InstrumentsHaving): AggregateInstrumentsResult!
  getOrchestra(by: GetOrchestraInput!): Orchestra
  listOrchestras(filter: ListOrchestrasInput, pagination: Pagination = {limit: 20}, sort: [SortOrchestra!]): Orchestras!
  aggregateOrchestras(filter: ListOrchestrasInput, pagination: Pagination, sort: [SortOrchestra!], groupBy: OrchestrasGroupBy, having: OrchestrasHaving): AggregateOrchestrasResult!
  getSession(by: GetSessionInput!): Session
  listSessions(filter: ListSessionsInput, pagination: Pagination = {limit: 20}, sort: [SortSession!]): Sessions!
  aggregateSessions(filter: ListSessionsInput, pagination: Pagination, sort: [SortSession!], groupBy: SessionsGroupBy, having: SessionsHaving): AggregateSessionsResult!
  getStat(by: GetStatInput!): Stat
  listStats(filter: ListStatsInput, pagination: Pagination = {limit: 20}, sort: [SortStat!]): Stats!
  aggregateStats(filter: ListStatsInput, pagination: Pagination, sort: [SortStat!], groupBy: StatsGroupBy, having: StatsHaving): AggregateStatsResult!
  getUserSession(by: GetUserSessionInput!): UserSession
  listUserSessions(filter: ListUserSessionsInput, pagination: Pagination = {limit: 20}, sort: [SortUserSession!]): UserSessions!
  aggregateUserSessions(filter: ListUserSessionsInput, pagination: Pagination, sort: [SortUserSession!], groupBy: UserSessionsGroupBy, having: UserSessionsHaving): AggregateUserSessionsResult!
  getUser(by: GetUserInput!): User
  listUsers(filter: ListUsersInput, pagination: Pagination = {limit: 20}, sort: [SortUser!]): Users!
  aggregateUsers(filter: ListUsersInput, pagination: Pagination, sort: [SortUser!], groupBy: UsersGroupBy, having: UsersHaving): AggregateUsersResult!
}

type Instrument {
  id: Int!
  type: String!
  description: String
  purchaseDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: Int
  orchestraId: Int
  user: User
  orchestra: Orchestra
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type User {
  id: Int!
  username: String!
  provider: String!
  email: String!
  statsId: Int
  details: JSONObject
  verified: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  mentorId: Int
  stats: Stat
  mentor: User
  instruments(filter: ListInstrumentsInput, pagination: Pagination, sort: [SortInstrument!]): Instruments!
  userSessions(filter: ListUserSessionsInput, pagination: Pagination, sort: [SortUserSession!]): UserSessions!
  students(filter: ListUsersInput, pagination: Pagination, sort: [SortUser!]): Users!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Stat {
  id: Int!
  exp: Int!
  likes: Int!
  views: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  users(filter: ListUsersInput, pagination: Pagination, sort: [SortUser!]): Users!
  user: User
}

type Users {
  records: [User!]!
  limit: Int!
  offset: Int!
  count: Int
}

input ListUsersInput {
  _required: Boolean
  _nested: Boolean
  _not: ListUsersInput
  _raw: RawExpression
  _and: [ListUsersInput!]
  _or: [ListUsersInput!]
  id: NumberFilter
  username: StringFilter
  provider: StringFilter
  email: StringFilter
  statsId: NumberFilter
  details: JsonFilter
  verified: BooleanFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  mentorId: NumberFilter
  stats: ListStatsInput
  mentor: ListUsersInput
  instruments: ListInstrumentsInput
  userSessions: ListUserSessionsInput
  students: ListUsersInput
  _count: CountUsersFilterInput
  _avg: AvgUsersFilterInput
  _sum: SumUsersFilterInput
  _min: MinUsersFilterInput
  _max: MaxUsersFilterInput
}

input RawExpression {
  expression: String
  bindings: [JSON]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input NumberFilter {
  _eq: Float
  _neq: Float
  _lt: Float
  _lte: Float
  _gt: Float
  _gte: Float
  _between: [Float]
  _notBetween: [Float]
  _in: [Float]
  _notIn: [Float]
}

input StringFilter {
  _eq: String
  _neq: String
  _lt: String
  _lte: String
  _gt: String
  _gte: String
  _like: String
  _iLike: String
  _regExp: String
  _iRegExp: String
  _between: [String!]
  _notBetween: [String!]
  _in: [String]
  _notIn: [String]
  _contains: String
  _startsWith: String
  _endsWith: String
}

input JsonFilter {
  _fields: [JsonFieldFilter!]!
}

input JsonFieldFilter {
  field: String!
  value: StringNumberFilter!
}

input StringNumberFilter {
  _eq: StringNumber
  _neq: StringNumber
  _lt: StringNumber
  _lte: StringNumber
  _gt: StringNumber
  _gte: StringNumber
  _like: StringNumber
  _iLike: StringNumber
  _regExp: StringNumber
  _iRegExp: StringNumber
  _between: [StringNumber!]
  _notBetween: [StringNumber!]
  _in: [StringNumber]
  _notIn: [StringNumber]
  _contains: StringNumber
  _startsWith: StringNumber
  _endsWith: StringNumber
}

"""number or string"""
scalar StringNumber

input BooleanFilter {
  _eq: Boolean
  _neq: Boolean
}

input DateFilter {
  _eq: Date
  _neq: Date
  _lt: Date
  _lte: Date
  _gt: Date
  _gte: Date
  _between: [Date]
  _notBetween: [Date]
  _in: [Date]
  _notIn: [Date]
  _year: NumberFilter
  _month: NumberFilter
  _day: NumberFilter
  _hour: NumberFilter
  _minute: NumberFilter
  _second: NumberFilter
  _dow: NumberFilter
  _date: StringFilter
}

scalar Date

input ListStatsInput {
  _required: Boolean
  _nested: Boolean
  _not: ListStatsInput
  _raw: RawExpression
  _and: [ListStatsInput!]
  _or: [ListStatsInput!]
  id: NumberFilter
  exp: NumberFilter
  likes: NumberFilter
  views: NumberFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  user: ListUsersInput
  users: ListUsersInput
  _count: CountStatsFilterInput
  _avg: AvgStatsFilterInput
  _sum: SumStatsFilterInput
  _min: MinStatsFilterInput
  _max: MaxStatsFilterInput
}

input CountStatsFilterInput {
  id: NumberFilter
  exp: NumberFilter
  likes: NumberFilter
  views: NumberFilter
  createdAt: NumberFilter
  updatedAt: NumberFilter
  _all: NumberFilter
}

input AvgStatsFilterInput {
  id: NumberFilter
  exp: NumberFilter
  likes: NumberFilter
  views: NumberFilter
}

input SumStatsFilterInput {
  id: Int
  exp: Int
  likes: Int
  views: Int
}

input MinStatsFilterInput {
  id: Int
  exp: Int
  likes: Int
  views: Int
}

input MaxStatsFilterInput {
  id: Int
  exp: Int
  likes: Int
  views: Int
}

input ListInstrumentsInput {
  _required: Boolean
  _nested: Boolean
  _not: ListInstrumentsInput
  _raw: RawExpression
  _and: [ListInstrumentsInput!]
  _or: [ListInstrumentsInput!]
  id: NumberFilter
  type: StringFilter
  description: StringFilter
  purchaseDate: DateFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  userId: NumberFilter
  orchestraId: NumberFilter
  user: ListUsersInput
  orchestra: ListOrchestrasInput
  _count: CountInstrumentsFilterInput
  _avg: AvgInstrumentsFilterInput
  _sum: SumInstrumentsFilterInput
  _min: MinInstrumentsFilterInput
  _max: MaxInstrumentsFilterInput
}

input ListOrchestrasInput {
  _required: Boolean
  _nested: Boolean
  _not: ListOrchestrasInput
  _raw: RawExpression
  _and: [ListOrchestrasInput!]
  _or: [ListOrchestrasInput!]
  id: NumberFilter
  name: StringFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  instruments: ListInstrumentsInput
  _count: CountOrchestrasFilterInput
  _avg: AvgOrchestrasFilterInput
  _sum: SumOrchestrasFilterInput
  _min: MinOrchestrasFilterInput
  _max: MaxOrchestrasFilterInput
}

input CountOrchestrasFilterInput {
  id: NumberFilter
  name: NumberFilter
  createdAt: NumberFilter
  updatedAt: NumberFilter
  _all: NumberFilter
}

input AvgOrchestrasFilterInput {
  id: NumberFilter
}

input SumOrchestrasFilterInput {
  id: Int
}

input MinOrchestrasFilterInput {
  id: Int
}

input MaxOrchestrasFilterInput {
  id: Int
}

input CountInstrumentsFilterInput {
  id: NumberFilter
  type: NumberFilter
  description: NumberFilter
  purchaseDate: NumberFilter
  createdAt: NumberFilter
  updatedAt: NumberFilter
  userId: NumberFilter
  orchestraId: NumberFilter
  _all: NumberFilter
}

input AvgInstrumentsFilterInput {
  id: NumberFilter
  userId: NumberFilter
  orchestraId: NumberFilter
}

input SumInstrumentsFilterInput {
  id: Int
  userId: Int
  orchestraId: Int
}

input MinInstrumentsFilterInput {
  id: Int
  userId: Int
  orchestraId: Int
}

input MaxInstrumentsFilterInput {
  id: Int
  userId: Int
  orchestraId: Int
}

input ListUserSessionsInput {
  _required: Boolean
  _nested: Boolean
  _not: ListUserSessionsInput
  _raw: RawExpression
  _and: [ListUserSessionsInput!]
  _or: [ListUserSessionsInput!]
  id: NumberFilter
  time: DateFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  userId: NumberFilter
  sessionId: NumberFilter
  user: ListUsersInput
  session: ListSessionsInput
  _count: CountUserSessionsFilterInput
  _avg: AvgUserSessionsFilterInput
  _sum: SumUserSessionsFilterInput
  _min: MinUserSessionsFilterInput
  _max: MaxUserSessionsFilterInput
}

input ListSessionsInput {
  _required: Boolean
  _nested: Boolean
  _not: ListSessionsInput
  _raw: RawExpression
  _and: [ListSessionsInput!]
  _or: [ListSessionsInput!]
  id: NumberFilter
  name: StringFilter
  start: DateFilter
  end: DateFilter
  time: StringFilter
  location: StringFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  userSessions: ListUserSessionsInput
  _count: CountSessionsFilterInput
  _avg: AvgSessionsFilterInput
  _sum: SumSessionsFilterInput
  _min: MinSessionsFilterInput
  _max: MaxSessionsFilterInput
}

input CountSessionsFilterInput {
  id: NumberFilter
  name: NumberFilter
  start: NumberFilter
  end: NumberFilter
  time: NumberFilter
  location: NumberFilter
  createdAt: NumberFilter
  updatedAt: NumberFilter
  _all: NumberFilter
}

input AvgSessionsFilterInput {
  id: NumberFilter
}

input SumSessionsFilterInput {
  id: Int
}

input MinSessionsFilterInput {
  id: Int
}

input MaxSessionsFilterInput {
  id: Int
}

input CountUserSessionsFilterInput {
  id: NumberFilter
  time: NumberFilter
  createdAt: NumberFilter
  updatedAt: NumberFilter
  userId: NumberFilter
  sessionId: NumberFilter
  _all: NumberFilter
}

input AvgUserSessionsFilterInput {
  id: NumberFilter
  userId: NumberFilter
  sessionId: NumberFilter
}

input SumUserSessionsFilterInput {
  id: Int
  userId: Int
  sessionId: Int
}

input MinUserSessionsFilterInput {
  id: Int
  userId: Int
  sessionId: Int
}

input MaxUserSessionsFilterInput {
  id: Int
  userId: Int
  sessionId: Int
}

input CountUsersFilterInput {
  id: NumberFilter
  username: NumberFilter
  provider: NumberFilter
  email: NumberFilter
  statsId: NumberFilter
  details: NumberFilter
  verified: NumberFilter
  createdAt: NumberFilter
  updatedAt: NumberFilter
  mentorId: NumberFilter
  _all: NumberFilter
}

input AvgUsersFilterInput {
  id: NumberFilter
  statsId: NumberFilter
  mentorId: NumberFilter
}

input SumUsersFilterInput {
  id: Int
  statsId: Int
  mentorId: Int
}

input MinUsersFilterInput {
  id: Int
  statsId: Int
  mentorId: Int
}

input MaxUsersFilterInput {
  id: Int
  statsId: Int
  mentorId: Int
}

input Pagination {
  disabled: Boolean
  page: Int
  limit: Int = 20
  offset: Int = 0
}

input SortUser {
  id: SortOption
  username: SortOption
  provider: SortOption
  email: SortOption
  statsId: SortOption
  details: SortOption
  verified: SortOption
  createdAt: SortOption
  updatedAt: SortOption
  mentorId: SortOption
  stats: SortStat
  mentor: SortUser
  instruments: SortInstrument
  userSessions: SortUserSession
  students: SortUser
  _count: CountUsersSortInput
  _avg: AvgUsersSortInput
  _sum: SumUsersSortInput
  _min: MinUsersSortInput
  _max: MaxUsersSortInput
}

input SortOption {
  direction: SortDirection!
  nulls: NullsDirection
}

enum SortDirection {
  ASC
  DESC
}

enum NullsDirection {
  FIRST
  LAST
}

input SortStat {
  id: SortOption
  exp: SortOption
  likes: SortOption
  views: SortOption
  createdAt: SortOption
  updatedAt: SortOption
  user: SortUser
  users: SortUser
  _count: CountStatsSortInput
  _avg: AvgStatsSortInput
  _sum: SumStatsSortInput
  _min: MinStatsSortInput
  _max: MaxStatsSortInput
}

input CountStatsSortInput {
  id: SortOption
  exp: SortOption
  likes: SortOption
  views: SortOption
  createdAt: SortOption
  updatedAt: SortOption
  _all: SortOption
}

input AvgStatsSortInput {
  id: SortOption
  exp: SortOption
  likes: SortOption
  views: SortOption
}

input SumStatsSortInput {
  id: SortOption
  exp: SortOption
  likes: SortOption
  views: SortOption
}

input MinStatsSortInput {
  id: SortOption
  exp: SortOption
  likes: SortOption
  views: SortOption
}

input MaxStatsSortInput {
  id: SortOption
  exp: SortOption
  likes: SortOption
  views: SortOption
}

input SortInstrument {
  id: SortOption
  type: SortOption
  description: SortOption
  purchaseDate: SortOption
  createdAt: SortOption
  updatedAt: SortOption
  userId: SortOption
  orchestraId: SortOption
  user: SortUser
  orchestra: SortOrchestra
  _count: CountInstrumentsSortInput
  _avg: AvgInstrumentsSortInput
  _sum: SumInstrumentsSortInput
  _min: MinInstrumentsSortInput
  _max: MaxInstrumentsSortInput
}

input SortOrchestra {
  id: SortOption
  name: SortOption
  createdAt: SortOption
  updatedAt: SortOption
  instruments: SortInstrument
  _count: CountOrchestrasSortInput
  _avg: AvgOrchestrasSortInput
  _sum: SumOrchestrasSortInput
  _min: MinOrchestrasSortInput
  _max: MaxOrchestrasSortInput
}

input CountOrchestrasSortInput {
  id: SortOption
  name: SortOption
  createdAt: SortOption
  updatedAt: SortOption
  _all: SortOption
}

input AvgOrchestrasSortInput {
  id: SortOption
}

input SumOrchestrasSortInput {
  id: SortOption
}

input MinOrchestrasSortInput {
  id: SortOption
}

input MaxOrchestrasSortInput {
  id: SortOption
}

input CountInstrumentsSortInput {
  id: SortOption
  type: SortOption
  description: SortOption
  purchaseDate: SortOption
  createdAt: SortOption
  updatedAt: SortOption
  userId: SortOption
  orchestraId: SortOption
  _all: SortOption
}

input AvgInstrumentsSortInput {
  id: SortOption
  userId: SortOption
  orchestraId: SortOption
}

input SumInstrumentsSortInput {
  id: SortOption
  userId: SortOption
  orchestraId: SortOption
}

input MinInstrumentsSortInput {
  id: SortOption
  userId: SortOption
  orchestraId: SortOption
}

input MaxInstrumentsSortInput {
  id: SortOption
  userId: SortOption
  orchestraId: SortOption
}

input SortUserSession {
  id: SortOption
  time: SortOption
  createdAt: SortOption
  updatedAt: SortOption
  userId: SortOption
  sessionId: SortOption
  user: SortUser
  session: SortSession
  _count: CountUserSessionsSortInput
  _avg: AvgUserSessionsSortInput
  _sum: SumUserSessionsSortInput
  _min: MinUserSessionsSortInput
  _max: MaxUserSessionsSortInput
}

input SortSession {
  id: SortOption
  name: SortOption
  start: SortOption
  end: SortOption
  time: SortOption
  location: SortOption
  createdAt: SortOption
  updatedAt: SortOption
  userSessions: SortUserSession
  _count: CountSessionsSortInput
  _avg: AvgSessionsSortInput
  _sum: SumSessionsSortInput
  _min: MinSessionsSortInput
  _max: MaxSessionsSortInput
}

input CountSessionsSortInput {
  id: SortOption
  name: SortOption
  start: SortOption
  end: SortOption
  time: SortOption
  location: SortOption
  createdAt: SortOption
  updatedAt: SortOption
  _all: SortOption
}

input AvgSessionsSortInput {
  id: SortOption
}

input SumSessionsSortInput {
  id: SortOption
}

input MinSessionsSortInput {
  id: SortOption
}

input MaxSessionsSortInput {
  id: SortOption
}

input CountUserSessionsSortInput {
  id: SortOption
  time: SortOption
  createdAt: SortOption
  updatedAt: SortOption
  userId: SortOption
  sessionId: SortOption
  _all: SortOption
}

input AvgUserSessionsSortInput {
  id: SortOption
  userId: SortOption
  sessionId: SortOption
}

input SumUserSessionsSortInput {
  id: SortOption
  userId: SortOption
  sessionId: SortOption
}

input MinUserSessionsSortInput {
  id: SortOption
  userId: SortOption
  sessionId: SortOption
}

input MaxUserSessionsSortInput {
  id: SortOption
  userId: SortOption
  sessionId: SortOption
}

input CountUsersSortInput {
  id: SortOption
  username: SortOption
  provider: SortOption
  email: SortOption
  statsId: SortOption
  details: SortOption
  verified: SortOption
  createdAt: SortOption
  updatedAt: SortOption
  mentorId: SortOption
  _all: SortOption
}

input AvgUsersSortInput {
  id: SortOption
  statsId: SortOption
  mentorId: SortOption
}

input SumUsersSortInput {
  id: SortOption
  statsId: SortOption
  mentorId: SortOption
}

input MinUsersSortInput {
  id: SortOption
  statsId: SortOption
  mentorId: SortOption
}

input MaxUsersSortInput {
  id: SortOption
  statsId: SortOption
  mentorId: SortOption
}

type Instruments {
  records: [Instrument!]!
  limit: Int!
  offset: Int!
  count: Int
}

type UserSessions {
  records: [UserSession!]!
  limit: Int!
  offset: Int!
  count: Int
}

type UserSession {
  id: Int!
  time: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: Int
  sessionId: Int
  user: User
  session: Session
}

type Session {
  id: Int!
  name: String!
  start: DateTime!
  end: DateTime!
  time: String!
  location: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  userSessions(filter: ListUserSessionsInput, pagination: Pagination, sort: [SortUserSession!]): UserSessions!
}

type Orchestra {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  instruments(filter: ListInstrumentsInput, pagination: Pagination, sort: [SortInstrument!]): Instruments!
}

input GetInstrumentInput {
  id: Int
}

type AggregateInstrumentsResult {
  records: [AggregateInstrument!]!
  limit: Int
  offset: Int
  count: Int
}

type AggregateInstrument {
  group: JSON
  count: CountInstrument
  countDistinct: CountInstrument
  avg: AvgInstrument
  sum: SumInstrument
  min: MinInstrument
  max: MaxInstrument
}

type CountInstrument {
  id: Int
  type: Int
  description: Int
  purchaseDate: Int
  createdAt: Int
  updatedAt: Int
  userId: Int
  orchestraId: Int
  _all: Int
  user: CountUser
  orchestra: CountOrchestra
}

type CountUser {
  id: Int
  username: Int
  provider: Int
  email: Int
  statsId: Int
  details: Int
  verified: Int
  createdAt: Int
  updatedAt: Int
  mentorId: Int
  _all: Int
  stats: CountStat
  mentor: CountUser
}

type CountStat {
  id: Int
  exp: Int
  likes: Int
  views: Int
  createdAt: Int
  updatedAt: Int
  _all: Int
  user: CountUser
}

type CountOrchestra {
  id: Int
  name: Int
  createdAt: Int
  updatedAt: Int
  _all: Int
}

type AvgInstrument {
  id: Float
  userId: Float
  orchestraId: Float
  user: AvgUser
  orchestra: AvgOrchestra
}

type AvgUser {
  id: Float
  statsId: Float
  mentorId: Float
  stats: AvgStat
  mentor: AvgUser
}

type AvgStat {
  id: Float
  exp: Float
  likes: Float
  views: Float
  user: AvgUser
}

type AvgOrchestra {
  id: Float
}

type SumInstrument {
  id: Int
  userId: Int
  orchestraId: Int
  user: SumUser
  orchestra: SumOrchestra
}

type SumUser {
  id: Int
  statsId: Int
  mentorId: Int
  stats: SumStat
  mentor: SumUser
}

type SumStat {
  id: Int
  exp: Int
  likes: Int
  views: Int
  user: SumUser
}

type SumOrchestra {
  id: Int
}

type MinInstrument {
  id: Int
  userId: Int
  orchestraId: Int
  user: MinUser
  orchestra: MinOrchestra
}

type MinUser {
  id: Int
  statsId: Int
  mentorId: Int
  stats: MinStat
  mentor: MinUser
}

type MinStat {
  id: Int
  exp: Int
  likes: Int
  views: Int
  user: MinUser
}

type MinOrchestra {
  id: Int
}

type MaxInstrument {
  id: Int
  userId: Int
  orchestraId: Int
  user: MaxUser
  orchestra: MaxOrchestra
}

type MaxUser {
  id: Int
  statsId: Int
  mentorId: Int
  stats: MaxStat
  mentor: MaxUser
}

type MaxStat {
  id: Int
  exp: Int
  likes: Int
  views: Int
  user: MaxUser
}

type MaxOrchestra {
  id: Int
}

input InstrumentsGroupBy {
  id: Boolean
  type: Boolean
  description: Boolean
  purchaseDate: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  userId: Boolean
  orchestraId: Boolean
  _year: InstrumentsGroupByDate
  _month: InstrumentsGroupByDate
  _date: InstrumentsGroupByDate
  _day: InstrumentsGroupByDate
  _dow: InstrumentsGroupByDate
  user: UsersGroupBy
  orchestra: OrchestrasGroupBy
}

input InstrumentsGroupByDate {
  purchaseDate: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input UsersGroupBy {
  id: Boolean
  username: Boolean
  provider: Boolean
  email: Boolean
  statsId: Boolean
  details: Boolean
  verified: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  mentorId: Boolean
  _year: UsersGroupByDate
  _month: UsersGroupByDate
  _date: UsersGroupByDate
  _day: UsersGroupByDate
  _dow: UsersGroupByDate
  stats: StatsGroupBy
  mentor: UsersGroupBy
  instruments: InstrumentsGroupBy
  userSessions: UserSessionsGroupBy
  students: UsersGroupBy
}

input UsersGroupByDate {
  createdAt: Boolean
  updatedAt: Boolean
}

input StatsGroupBy {
  id: Boolean
  exp: Boolean
  likes: Boolean
  views: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  _year: StatsGroupByDate
  _month: StatsGroupByDate
  _date: StatsGroupByDate
  _day: StatsGroupByDate
  _dow: StatsGroupByDate
  user: UsersGroupBy
  users: UsersGroupBy
}

input StatsGroupByDate {
  createdAt: Boolean
  updatedAt: Boolean
}

input UserSessionsGroupBy {
  id: Boolean
  time: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  userId: Boolean
  sessionId: Boolean
  _year: UserSessionsGroupByDate
  _month: UserSessionsGroupByDate
  _date: UserSessionsGroupByDate
  _day: UserSessionsGroupByDate
  _dow: UserSessionsGroupByDate
  user: UsersGroupBy
  session: SessionsGroupBy
}

input UserSessionsGroupByDate {
  time: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input SessionsGroupBy {
  id: Boolean
  name: Boolean
  start: Boolean
  end: Boolean
  time: Boolean
  location: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  _year: SessionsGroupByDate
  _month: SessionsGroupByDate
  _date: SessionsGroupByDate
  _day: SessionsGroupByDate
  _dow: SessionsGroupByDate
  userSessions: UserSessionsGroupBy
}

input SessionsGroupByDate {
  start: Boolean
  end: Boolean
  createdAt: Boolean
  updatedAt: Boolean
}

input OrchestrasGroupBy {
  id: Boolean
  name: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  _year: OrchestrasGroupByDate
  _month: OrchestrasGroupByDate
  _date: OrchestrasGroupByDate
  _day: OrchestrasGroupByDate
  _dow: OrchestrasGroupByDate
  instruments: InstrumentsGroupBy
}

input OrchestrasGroupByDate {
  createdAt: Boolean
  updatedAt: Boolean
}

""""""
input InstrumentsHaving {
  _required: Boolean
  _nested: Boolean
  _not: ListInstrumentsInput
  _raw: RawExpression
  _and: [ListInstrumentsInput!]
  _or: [ListInstrumentsInput!]
  id: NumberFilter
  type: StringFilter
  description: StringFilter
  purchaseDate: DateFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  userId: NumberFilter
  orchestraId: NumberFilter
  user: ListUsersInput
  orchestra: ListOrchestrasInput
  _count: CountInstrumentsFilterInput
  _avg: AvgInstrumentsFilterInput
  _sum: SumInstrumentsFilterInput
  _min: MinInstrumentsFilterInput
  _max: MaxInstrumentsFilterInput
}

input GetOrchestraInput {
  id: Int
}

type Orchestras {
  records: [Orchestra!]!
  limit: Int!
  offset: Int!
  count: Int
}

type AggregateOrchestrasResult {
  records: [AggregateOrchestra!]!
  limit: Int
  offset: Int
  count: Int
}

type AggregateOrchestra {
  group: JSON
  count: CountOrchestra
  countDistinct: CountOrchestra
  avg: AvgOrchestra
  sum: SumOrchestra
  min: MinOrchestra
  max: MaxOrchestra
}

""""""
input OrchestrasHaving {
  _required: Boolean
  _nested: Boolean
  _not: ListOrchestrasInput
  _raw: RawExpression
  _and: [ListOrchestrasInput!]
  _or: [ListOrchestrasInput!]
  id: NumberFilter
  name: StringFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  instruments: ListInstrumentsInput
  _count: CountOrchestrasFilterInput
  _avg: AvgOrchestrasFilterInput
  _sum: SumOrchestrasFilterInput
  _min: MinOrchestrasFilterInput
  _max: MaxOrchestrasFilterInput
}

input GetSessionInput {
  id: Int
}

type Sessions {
  records: [Session!]!
  limit: Int!
  offset: Int!
  count: Int
}

type AggregateSessionsResult {
  records: [AggregateSession!]!
  limit: Int
  offset: Int
  count: Int
}

type AggregateSession {
  group: JSON
  count: CountSession
  countDistinct: CountSession
  avg: AvgSession
  sum: SumSession
  min: MinSession
  max: MaxSession
}

type CountSession {
  id: Int
  name: Int
  start: Int
  end: Int
  time: Int
  location: Int
  createdAt: Int
  updatedAt: Int
  _all: Int
}

type AvgSession {
  id: Float
}

type SumSession {
  id: Int
}

type MinSession {
  id: Int
}

type MaxSession {
  id: Int
}

""""""
input SessionsHaving {
  _required: Boolean
  _nested: Boolean
  _not: ListSessionsInput
  _raw: RawExpression
  _and: [ListSessionsInput!]
  _or: [ListSessionsInput!]
  id: NumberFilter
  name: StringFilter
  start: DateFilter
  end: DateFilter
  time: StringFilter
  location: StringFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  userSessions: ListUserSessionsInput
  _count: CountSessionsFilterInput
  _avg: AvgSessionsFilterInput
  _sum: SumSessionsFilterInput
  _min: MinSessionsFilterInput
  _max: MaxSessionsFilterInput
}

input GetStatInput {
  id: Int
}

type Stats {
  records: [Stat!]!
  limit: Int!
  offset: Int!
  count: Int
}

type AggregateStatsResult {
  records: [AggregateStat!]!
  limit: Int
  offset: Int
  count: Int
}

type AggregateStat {
  group: JSON
  count: CountStat
  countDistinct: CountStat
  avg: AvgStat
  sum: SumStat
  min: MinStat
  max: MaxStat
}

""""""
input StatsHaving {
  _required: Boolean
  _nested: Boolean
  _not: ListStatsInput
  _raw: RawExpression
  _and: [ListStatsInput!]
  _or: [ListStatsInput!]
  id: NumberFilter
  exp: NumberFilter
  likes: NumberFilter
  views: NumberFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  user: ListUsersInput
  users: ListUsersInput
  _count: CountStatsFilterInput
  _avg: AvgStatsFilterInput
  _sum: SumStatsFilterInput
  _min: MinStatsFilterInput
  _max: MaxStatsFilterInput
}

input GetUserSessionInput {
  id: Int
}

type AggregateUserSessionsResult {
  records: [AggregateUserSession!]!
  limit: Int
  offset: Int
  count: Int
}

type AggregateUserSession {
  group: JSON
  count: CountUserSession
  countDistinct: CountUserSession
  avg: AvgUserSession
  sum: SumUserSession
  min: MinUserSession
  max: MaxUserSession
}

type CountUserSession {
  id: Int
  time: Int
  createdAt: Int
  updatedAt: Int
  userId: Int
  sessionId: Int
  _all: Int
  user: CountUser
  session: CountSession
}

type AvgUserSession {
  id: Float
  userId: Float
  sessionId: Float
  user: AvgUser
  session: AvgSession
}

type SumUserSession {
  id: Int
  userId: Int
  sessionId: Int
  user: SumUser
  session: SumSession
}

type MinUserSession {
  id: Int
  userId: Int
  sessionId: Int
  user: MinUser
  session: MinSession
}

type MaxUserSession {
  id: Int
  userId: Int
  sessionId: Int
  user: MaxUser
  session: MaxSession
}

""""""
input UserSessionsHaving {
  _required: Boolean
  _nested: Boolean
  _not: ListUserSessionsInput
  _raw: RawExpression
  _and: [ListUserSessionsInput!]
  _or: [ListUserSessionsInput!]
  id: NumberFilter
  time: DateFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  userId: NumberFilter
  sessionId: NumberFilter
  user: ListUsersInput
  session: ListSessionsInput
  _count: CountUserSessionsFilterInput
  _avg: AvgUserSessionsFilterInput
  _sum: SumUserSessionsFilterInput
  _min: MinUserSessionsFilterInput
  _max: MaxUserSessionsFilterInput
}

input GetUserInput {
  id: Int
  username: String
  statsId: Int
  email__provider: UsersEmailProviderKey
}

input UsersEmailProviderKey {
  email: String!
  provider: String!
}

type AggregateUsersResult {
  records: [AggregateUser!]!
  limit: Int
  offset: Int
  count: Int
}

type AggregateUser {
  group: JSON
  count: CountUser
  countDistinct: CountUser
  avg: AvgUser
  sum: SumUser
  min: MinUser
  max: MaxUser
}

""""""
input UsersHaving {
  _required: Boolean
  _nested: Boolean
  _not: ListUsersInput
  _raw: RawExpression
  _and: [ListUsersInput!]
  _or: [ListUsersInput!]
  id: NumberFilter
  username: StringFilter
  provider: StringFilter
  email: StringFilter
  statsId: NumberFilter
  details: JsonFilter
  verified: BooleanFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  mentorId: NumberFilter
  stats: ListStatsInput
  mentor: ListUsersInput
  instruments: ListInstrumentsInput
  userSessions: ListUserSessionsInput
  students: ListUsersInput
  _count: CountUsersFilterInput
  _avg: AvgUsersFilterInput
  _sum: SumUsersFilterInput
  _min: MinUsersFilterInput
  _max: MaxUsersFilterInput
}