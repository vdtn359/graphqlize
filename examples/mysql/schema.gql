type Query {
  getInstrument(by: GetInstrumentInput!): Instrument
  listInstruments(filter: ListInstrumentsInput, pagination: Pagination = {limit: 20}, sort: [SortInstrument!]): Instruments!
  getOrchestra(by: GetOrchestraInput!): Orchestra
  listOrchestras(filter: ListOrchestrasInput, pagination: Pagination = {limit: 20}, sort: [SortOrchestra!]): Orchestras!
  getSession(by: GetSessionInput!): Session
  listSessions(filter: ListSessionsInput, pagination: Pagination = {limit: 20}, sort: [SortSession!]): Sessions!
  getStat(by: GetStatInput!): Stat
  listStats(filter: ListStatsInput, pagination: Pagination = {limit: 20}, sort: [SortStat!]): Stats!
  getUserSession(by: GetUserSessionInput!): UserSession
  listUserSessions(filter: ListUserSessionsInput, pagination: Pagination = {limit: 20}, sort: [SortUserSession!]): UserSessions!
  getUser(by: GetUserInput!): User
  listUsers(filter: ListUsersInput, pagination: Pagination = {limit: 20}, sort: [SortUser!]): Users!
}

type Instrument {
  userId: Int
  orchestraId: Int
  id: Int!
  type: String!
  description: String
  purchaseDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User
  orchestra: Orchestra
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type User {
  statsId: Int
  mentorId: Int
  id: Int!
  username: String!
  provider: String!
  email: String!
  details: JSONObject
  verified: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  stats: Stat
  mentor: User
  instruments(filter: ListInstrumentsInput, pagination: Pagination = {limit: 20}, sort: [SortInstrument!]): Instruments!
  userSessions(filter: ListUserSessionsInput, pagination: Pagination = {limit: 20}, sort: [SortUserSession!]): UserSessions!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Stat {
  id: Int!
  exp: Int!
  likes: Int!
  views: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  users(filter: ListUsersInput, pagination: Pagination = {limit: 20}, sort: [SortUser!]): Users!
}

type Users {
  records: [User!]!
  limit: Int!
  offset: Int!
  count: Int
}

input ListUsersInput {
  _nested: Boolean
  _not: ListUsersInput
  _and: [ListUsersInput!]
  _or: [ListUsersInput!]
  statsId: NumberFilter
  mentorId: NumberFilter
  id: NumberFilter
  username: StringFilter
  provider: StringFilter
  email: StringFilter
  details: JsonFilter
  verified: BooleanFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  stats: ListStatsInput
  mentor: ListUsersInput
  instruments: ListInstrumentsInput
  userSessions: ListUserSessionsInput
}

input NumberFilter {
  _eq: Float
  _neq: Float
  _le: Float
  _lte: Float
  _gt: Float
  _gte: Float
  _between: [Float]
  _notBetween: [Float]
  _in: [Float]
  _notIn: [Float]
}

input StringFilter {
  _eq: String
  _neq: String
  _le: String
  _lte: String
  _gt: String
  _gte: String
  _like: String
  _iLike: String
  _regExp: String
  _iRegExp: String
  _between: [String!]
  _notBetween: [String!]
  _in: [String]
  _notIn: [String]
  _contains: String
  _startsWith: String
  _endsWith: String
}

input JsonFilter {
  _fields: [JsonFieldFilter!]!
}

input JsonFieldFilter {
  field: String!
  value: StringNumberFilter!
}

input StringNumberFilter {
  _eq: StringNumber
  _neq: StringNumber
  _le: StringNumber
  _lte: StringNumber
  _gt: StringNumber
  _gte: StringNumber
  _like: StringNumber
  _iLike: StringNumber
  _regExp: StringNumber
  _iRegExp: StringNumber
  _between: [StringNumber!]
  _notBetween: [StringNumber!]
  _in: [StringNumber]
  _notIn: [StringNumber]
  _contains: StringNumber
  _startsWith: StringNumber
  _endsWith: StringNumber
}

"""number or string"""
scalar StringNumber

input BooleanFilter {
  _eq: Boolean
  _neq: Boolean
}

input DateFilter {
  _eq: Date
  _neq: Date
  _le: Date
  _lte: Date
  _gt: Date
  _gte: Date
  _between: [Date]
  _notBetween: [Date]
  _in: [Date]
  _notIn: [Date]
  _year: NumberFilter
  _month: NumberFilter
  _day: NumberFilter
  _hour: NumberFilter
  _minute: NumberFilter
  _second: NumberFilter
  _dayOfWeek: NumberFilter
  _date: StringFilter
}

scalar Date

input ListStatsInput {
  _nested: Boolean
  _not: ListStatsInput
  _and: [ListStatsInput!]
  _or: [ListStatsInput!]
  id: NumberFilter
  exp: NumberFilter
  likes: NumberFilter
  views: NumberFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  users: ListUsersInput
}

input ListInstrumentsInput {
  _nested: Boolean
  _not: ListInstrumentsInput
  _and: [ListInstrumentsInput!]
  _or: [ListInstrumentsInput!]
  userId: NumberFilter
  orchestraId: NumberFilter
  id: NumberFilter
  type: StringFilter
  description: StringFilter
  purchaseDate: DateFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  user: ListUsersInput
  orchestra: ListOrchestrasInput
}

input ListOrchestrasInput {
  _nested: Boolean
  _not: ListOrchestrasInput
  _and: [ListOrchestrasInput!]
  _or: [ListOrchestrasInput!]
  id: NumberFilter
  name: StringFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  instruments: ListInstrumentsInput
}

input ListUserSessionsInput {
  _nested: Boolean
  _not: ListUserSessionsInput
  _and: [ListUserSessionsInput!]
  _or: [ListUserSessionsInput!]
  userId: NumberFilter
  sessionId: NumberFilter
  id: NumberFilter
  time: DateFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  user: ListUsersInput
  session: ListSessionsInput
}

input ListSessionsInput {
  _nested: Boolean
  _not: ListSessionsInput
  _and: [ListSessionsInput!]
  _or: [ListSessionsInput!]
  id: NumberFilter
  name: StringFilter
  start: DateFilter
  end: DateFilter
  time: StringFilter
  location: StringFilter
  createdAt: DateFilter
  updatedAt: DateFilter
  userSessions: ListUserSessionsInput
}

input Pagination {
  disabled: Boolean
  page: Int
  limit: Int = 20
  offset: Int = 0
}

input SortUser {
  statsId: SortOption
  mentorId: SortOption
  id: SortOption
  username: SortOption
  provider: SortOption
  email: SortOption
  details: SortOption
  verified: SortOption
  createdAt: SortOption
  updatedAt: SortOption
  stats: SortStat
  mentor: SortUser
  instruments: SortInstrument
  userSessions: SortUserSession
}

input SortOption {
  sort: SortDirection!
  nulls: NullsDirection = LAST
}

enum SortDirection {
  ASC
  DESC
}

enum NullsDirection {
  FIRST
  LAST
}

input SortStat {
  id: SortOption
  exp: SortOption
  likes: SortOption
  views: SortOption
  createdAt: SortOption
  updatedAt: SortOption
  users: SortUser
}

input SortInstrument {
  userId: SortOption
  orchestraId: SortOption
  id: SortOption
  type: SortOption
  description: SortOption
  purchaseDate: SortOption
  createdAt: SortOption
  updatedAt: SortOption
  user: SortUser
  orchestra: SortOrchestra
}

input SortOrchestra {
  id: SortOption
  name: SortOption
  createdAt: SortOption
  updatedAt: SortOption
  instruments: SortInstrument
}

input SortUserSession {
  userId: SortOption
  sessionId: SortOption
  id: SortOption
  time: SortOption
  createdAt: SortOption
  updatedAt: SortOption
  user: SortUser
  session: SortSession
}

input SortSession {
  id: SortOption
  name: SortOption
  start: SortOption
  end: SortOption
  time: SortOption
  location: SortOption
  createdAt: SortOption
  updatedAt: SortOption
  userSessions: SortUserSession
}

type Instruments {
  records: [Instrument!]!
  limit: Int!
  offset: Int!
  count: Int
}

type UserSessions {
  records: [UserSession!]!
  limit: Int!
  offset: Int!
  count: Int
}

type UserSession {
  userId: Int
  sessionId: Int
  id: Int!
  time: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User
  session: Session
}

type Session {
  id: Int!
  name: String!
  start: DateTime!
  end: DateTime!
  time: String!
  location: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  userSessions(filter: ListUserSessionsInput, pagination: Pagination = {limit: 20}, sort: [SortUserSession!]): UserSessions!
}

type Orchestra {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  instruments(filter: ListInstrumentsInput, pagination: Pagination = {limit: 20}, sort: [SortInstrument!]): Instruments!
}

input GetInstrumentInput {
  id: Int
}

input GetOrchestraInput {
  id: Int
}

type Orchestras {
  records: [Orchestra!]!
  limit: Int!
  offset: Int!
  count: Int
}

input GetSessionInput {
  id: Int
}

type Sessions {
  records: [Session!]!
  limit: Int!
  offset: Int!
  count: Int
}

input GetStatInput {
  id: Int
}

type Stats {
  records: [Stat!]!
  limit: Int!
  offset: Int!
  count: Int
}

input GetUserSessionInput {
  id: Int
}

input GetUserInput {
  id: Int
  statsId: Int
  username: String
}
